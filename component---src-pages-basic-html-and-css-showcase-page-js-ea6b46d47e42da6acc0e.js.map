{"version":3,"sources":["webpack:///./src/components/Title/TitlePages.jsx","webpack:///./src/mock/projects/basicHtmlAndCssProjectsData.js","webpack:///./src/components/Projects/ShowcaseProjects.jsx","webpack:///./src/pages/ProjectShowcasePage.jsx","webpack:///./src/pages/basic-html-and-css-showcase-page.js","webpack:///./src/components/Footer/FooterPages.jsx"],"names":["TitlePages","_ref","text","React","createElement","className","style","flexGrow","href","onClick","goBackHandler","window","history","back","basicHtmlAndCssData","id","nanoid","img","title","info","info2","url","repo","ShowcaseProjects","projects","isDesktop","setIsDesktop","useState","isMobile","setIsMobile","useEffect","innerWidth","Container","fluid","Row","map","project","Col","lg","sm","key","Fade","bottom","duration","delay","distance","target","aria-label","rel","Tilt","options","reverse","max","perspective","scale","speed","transition","axis","reset","easing","data-tilt","ProjectImg","alt","filename","Link","to","ProjectShowcasePage","pageTitle","pageDescription","projectData","setProjects","_toConsumableArray","Fragment","Helmet","charSet","lang","name","content","PortfolioProvider","value","FooterPages","BasicHtmlAndCssPage"],"mappings":"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","file":"component---src-pages-basic-html-and-css-showcase-page-js-ea6b46d47e42da6acc0e.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TitlePages = ({ text }) => {\n  const goBackHandler = () => {\n    window.history.back();\n  };\n\n  return (\n    <div className=\"title-pages\">\n      <div className=\"title-text-wrapper\" style={{ flexGrow: 1 }}>\n        <h1 className=\"title-pages-text\">{text}</h1>\n      </div>\n      <span>\n        <a href=\"#\" onClick={goBackHandler} className=\"cta-btn cta-btn--back\">\n          Back\n        </a>\n      </span>\n    </div>\n  );\n};\n\nTitlePages.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default TitlePages;\n","import { nanoid } from 'nanoid';\n\n// MAIN PAGE PROJECTS DATA\nconst basicHtmlAndCssData = [\n  // {\n  //   id: nanoid(),\n  //   img: '',\n  //   title: '',\n  //   info: '',\n  //   info2: '',\n  //   url: '',\n  //   repo: '',\n  // },\n\n  {\n    id: nanoid(),\n    img: 'project.jpg',\n    title: 'Pokedex Replica',\n    info: 'The Pokedex Replica is a web application that offers a user-friendly interface and a wealth of detailed information, it is the perfect companion for any Pokemon trainer or enthusiast.',\n    info2: '',\n    url: 'https://shcoobz.github.io/pokedex-replica/',\n    repo: 'https://github.com/Shcoobz/pokedex-replica',\n  },\n\n  {\n    id: nanoid(),\n    img: 'quote-generator.png',\n    title: 'Quote Generator',\n    info: 'This was one of my first projects. It is a single-page web application that retrieves random quotes from an API and allows users to share them on Twitter.',\n    info2: '',\n    url: 'https://shcoobz.github.io/quote-generator/',\n    repo: 'https://github.com/Shcoobz/quote-generator',\n  },\n\n  {\n    id: nanoid(),\n    img: 'infinity-scroll.png',\n    title: 'Infinity Scroll',\n    info: 'This web application uses the Unsplash API to provide an infinite scroll of random images. As the user scrolls down, it continuously loads more images for an endless visual experience.',\n    info2: '',\n    url: 'https://shcoobz.github.io/infinite-scroll/',\n    repo: 'https://github.com/Shcoobz/infinite-scroll',\n  },\n\n  {\n    id: nanoid(),\n    img: 'picture-in-picture.png',\n    title: 'Picture in picture',\n    info: 'This web application is an interactive tool designed to create a user-friendly interface where users can play a video in Picture in Picture mode, allowing them to watch video content while interacting with other applications or websites.',\n    info2: '',\n    url: 'https://shcoobz.github.io/picture-in-picture/',\n    repo: 'https://github.com/Shcoobz/picture-in-picture',\n  },\n];\n\nexport default basicHtmlAndCssData;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport Fade from 'react-reveal/Fade';\nimport Tilt from 'react-tilt';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport ProjectImg from '../Image/ProjectImg';\nimport '../../style/pages/_showcaseProjects.scss';\n\nconst ShowcaseProjects = ({ projects }) => {\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    if (window.innerWidth > 769) {\n      setIsDesktop(true);\n      setIsMobile(false);\n    } else {\n      setIsMobile(true);\n      setIsDesktop(false);\n    }\n  }, []);\n\n  return (\n    <section className=\"multi-projects\">\n      <Container fluid>\n        <div className=\"project-wrapper\">\n          <Row className=\"multi-projects-row\">\n            {projects.map((project) => {\n              const { title, info, info2, url, repo, img, id } = project;\n\n              return (\n                <Col lg={4} sm={12} key={id} className=\"multi-projects-col\">\n                  <Fade bottom duration={1000} delay={500} distance=\"30px\">\n                    <div className=\"project-container\">\n                      <div className=\"project-wrapper__image project-wrapper__multi\">\n                        <a\n                          href={url || '#!'}\n                          target=\"_blank\"\n                          aria-label=\"Project Link\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <Tilt\n                            options={{\n                              reverse: false,\n                              max: 8,\n                              perspective: 1000,\n                              scale: 1,\n                              speed: 300,\n                              transition: true,\n                              axis: null,\n                              reset: true,\n                              easing: 'cubic-bezier(.03,.98,.52,.99)',\n                            }}\n                          >\n                            <div data-tilt className=\"thumbnail rounded\">\n                              <ProjectImg alt={title} filename={img} />\n                            </div>\n                          </Tilt>\n                        </a>\n                      </div>\n                      <div className=\"project-wrapper__text\">\n                        <h3 id=\"multi-projects-title\" className=\"project-wrapper__text-title\">\n                          {title || 'Project Title'}\n                        </h3>\n                        <div>\n                          <p className=\"multi-projects-info\">\n                            {info || 'Project description here...'}\n                          </p>\n                          <p className=\"multi-projects-info2\">{info2 || ''}</p>\n                        </div>\n                        <div className=\"button-container\">\n                          {url && (\n                            <Link\n                              to={url}\n                              className=\"cta-btn cta-btn--hero\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              See Live\n                            </Link>\n                          )}\n\n                          {repo && (\n                            <a\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"cta-btn text-color-main\"\n                              href={repo}\n                            >\n                              Source Code\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </Fade>\n                </Col>\n              );\n            })}\n          </Row>\n        </div>\n      </Container>\n    </section>\n  );\n};\n\nShowcaseProjects.propTypes = {\n  projects: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      info: PropTypes.string,\n      info2: PropTypes.string,\n      url: PropTypes.string,\n      repo: PropTypes.string,\n      img: PropTypes.string,\n      id: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ShowcaseProjects;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../style/main.scss';\nimport ShowcaseProjects from '../components/Projects/ShowcaseProjects';\nimport { PortfolioProvider } from '../context/context';\nimport TitlePages from '../components/Title/TitlePages';\nimport FooterPages from '../components/Footer/FooterPages';\n\nconst ProjectShowcasePage = ({ pageTitle, pageDescription, projectData }) => {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    setProjects([...projectData]);\n  }, [projectData]);\n\n  return (\n    <>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <html lang=\"en\" />\n        <meta name=\"description\" content={pageDescription} />\n      </Helmet>\n      <PortfolioProvider value={{ projects }}>\n        <TitlePages text={pageTitle} />\n        <ShowcaseProjects projects={projects} />\n        <FooterPages />\n      </PortfolioProvider>\n    </>\n  );\n};\n\nProjectShowcasePage.propTypes = {\n  pageTitle: PropTypes.string.isRequired,\n  pageDescription: PropTypes.string.isRequired,\n  projectData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      img: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      info: PropTypes.string.isRequired,\n      info2: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n      repo: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ProjectShowcasePage;\n","import React from 'react';\nimport basicHtmlAndCssData from '../mock/projects/basicHtmlAndCssProjectsData';\nimport ProjectShowcasePage from './ProjectShowcasePage';\n\nconst BasicHtmlAndCssPage = () => {\n  return (\n    <ProjectShowcasePage\n      pageTitle=\"let title = [ 'HTML', 'CSS', 'JavaScript' ]\"\n      pageDescription=\"Collection of my basic HTML, CSS and JavaScript projects.\"\n      projectData={basicHtmlAndCssData}\n    />\n  );\n};\n\nexport default BasicHtmlAndCssPage;\n","import React from 'react';\n\nconst FooterPages = () => {\n  return <footer className=\"footer-pages\" />;\n};\n\nexport default FooterPages;\n"],"sourceRoot":""}